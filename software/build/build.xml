<?xml version="1.0" encoding="utf-8" ?>

<project name="build" default="usage" basedir="." xmlns:bda="antlib:gov.nih.nci.bdalite">

    <description>
        This is the master build file for the project.
        It should be placed in project/software/. This script wrappers sub projects to build, test and inspect code.
        These scripts require Java, Ant and SVN to work.
    </description>

    <!-- Property file names -->
    <property environment="env" />
    <property name="properties.file" value="project.properties" />
    <property name="local.properties.file" value="local.properties" />
    <property environment="env"/>

    <!-- Local property file -->
    <property file="${local.properties.file}" />
    <available file="${local.properties.file}" property="local.properties.file.exists" />

    <!-- Project property file -->
    <property file="${properties.file}" />
    <available file="${properties.file}" property="properties.file.exists" />
    <fail unless="properties.file.exists" message="The properties.file ${properties.file} does not exist." />

    <!-- Application values -->
    <property name="project.name" value="ncitermform"/>
    <property name="project.short.name" value="ncitf" />
    <property name="webapp.war.name" value="${project.name}.war" />
    <property name="webapp.prop.file" value="NCITermFormProperties.xml" />
    <property name="download.template.file" value="CDISC_Multi_Term_Request.xls" />

    <path id="classpath">
        <fileset dir="../${project.name}/extlib">
            <include name="**/*.jar" />
        </fileset>
    </path>
    <!-- BDA-Lite Task definitions -->
    <taskdef uri="antlib:gov.nih.nci.bdalite" resource="gov/nih/nci/bdalite/ant/bda-lite.xml" classpathref="classpath" />

    <!-- BDA-Lite standard locations -->
    <bda:BDAInit />

    <!-- Compile standard values -->
    <property name="webapp.build.dir" value="${bda.software.dir}/${project.name}/build/web" />
    <property name="webapp.classes.dir" value="${webapp.build.dir}/WEB-INF/classes" />
    <property name="webapp.dir" value="${bda.software.dir}/${project.name}/web" />
    <property name="exploded.dir" value="${bda.dist.dir}/exploded/${project.name}-webapp" />

    <!-- Ant Task definitions -->
    <taskdef name="for" classname="net.sf.antcontrib.logic.ForTask" classpathref="bda.project.compile.classpath"/>
    <taskdef name="if" classname="net.sf.antcontrib.logic.IfTask" classpathref="bda.project.compile.classpath"/>
    <taskdef name="osfamily" classname="net.sf.antcontrib.platform.OsFamily" classpathref="bda.project.compile.classpath"/>
    <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask" classpathref="bda.project.compile.classpath"/>

    <!--============================-->
    <!-- usage: show build targets  -->
    <!--============================-->

    <target name="usage" depends="-init" description="Explains how to use this build script">

        <bda:Usage />

    </target>

    <!-- This will delete all of the files created by the build process -->

    <target name="clean" depends="-init" description="Remove classes directory for clean build">

        <delete dir="${bda.target.dir}" quiet="true" />
        <delete dir="${webapp.build.dir}" quiet="true" />

    </target>

    <target name="-init" description="Sets up build are and initalizes variables">

        <tstamp>
            <format property="BUILD_DATE" pattern="MMMM-d-yyyy hh:mm aa" locale="en,US"/>
        </tstamp>

        <echo message="Using local properties file of ${local.properties.file}." />
        <echo message="Using project properties file of ${properties.file}." />

    </target>

    <!--=========================================-->
    <!-- build:all: Builds all the sub projects  -->
    <!--=========================================-->

    <target name="build:all" description="Normal build of application"
        depends="
            clean,
            compile:application-code,
            -war,
            -dist
        " >
    </target>

    <target name="build:dist" description="Build of application with completed configuration files"
        depends="
            clean,
            compile:application-code,
            -war,
            -dist,
            build:config
        " >
    </target>

    <target name="compile:application-code" depends="-init" description="Compiles all subproject code">

        <mkdir dir="${webapp.build.dir}" />
        <mkdir dir="${webapp.classes.dir}" />

        <!-- Compile java classes -->
        <javac srcdir="${bda.src.dir}" destdir="${webapp.classes.dir}" debug="true" includeantruntime="false">
            <classpath refid="bda.project.compile.classpath" />
            <classpath path ="${webapp.classes.dir}"/>
        </javac>

        <!-- Copy internal property files -->
        <copy todir="${webapp.classes.dir}" includeEmptyDirs="no" overwrite="true">
            <fileset dir="${bda.src.dir}/java">
                <patternset>
                    <include name="**/*.properties"/>
                </patternset>
            </fileset>
        </copy>

    </target>

    <target name="-war" depends="compile:application-code">

        <mkdir dir="${bda.dist.dir}/exploded/${project.name}-webapp" />
        <mkdir dir="${bda.dist.dir}/exploded/${project.name}-webapp/deploy" />
<!--
        <copy
                    file="${bda.conf.dir}/application-config-client.xml"
                    tofile="${webapp.classes.dir}/application-config-client.xml"
                    overwrite="true">
        </copy>
-->

        <war destfile="${bda.dist.dir}/exploded/${project.name}-webapp/${webapp.war.name}" basedir="${webapp.dir}">
            <lib dir="${bda.lib.dir}" includes="*.jar" />
            <lib dir="../${project.name}/extlib" includes="*.jar" />
            <classes dir="${webapp.classes.dir}"/>
        </war>

    </target>

    <target name="-dist" description="Copies external files to distribution folder">

        <echo message="Config folder: ${bda.conf.dir}" />

        <!-- Set a default Ant Hill build tag if tag is not set -->

        <bda:PropertyTest
            property="anthill.build.tag_built"
            default="Unknown"
        />

        <echo message="Tag: ${anthill.build.tag_built}" />
        <!-- Setup application property file with defaults, balance of which is set on deployment -->

        <copy todir="${bda.dist.dir}/exploded/${project.name}-webapp/deploy" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="true">
            <filterset>
                <filter token="app.build.tag" value="${anthill.build.tag_built}"/>
                <filter token="build.info" value="Built: ${BUILD_DATE}"/>
                <filter token="application.version" value="${application.version}"/>
                <filter token="debug.on" value="${debug.on}"/>
                <filter token="cadsr.sources" value="${cadsr.sources}"/>
                <filter token="cadsr.types" value="${cadsr.types}"/>
                <filter token="audio_captcha_background_noise_on" value="${audio_captcha_background_noise_on}"/>
                <filter token="recaptcha.site.key" value="${recaptcha.site.key}"/>
                <filter token="recaptcha.security.key" value="${recaptcha.security.key}"/>
           </filterset>
            <resources>
                <file file="${bda.conf.dir}/${webapp.prop.file}"/>
            </resources>
        </copy>

        <!-- Setup log4j file -->

        <copy todir="${bda.dist.dir}/exploded/${project.name}-webapp/deploy" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="true">
            <filterset>
                <filter token="log.package" value="${log.package}"/>
                <filter token="log4j.dtd.path" value="@application.data.path@/${ncitermform.conf.path}"/>
            </filterset>
            <resources>
                <file file="${bda.conf.dir}/${project.short.name}-log4j.xml"/>
            </resources>
        </copy>

        <copy todir="${bda.dist.dir}/exploded/${project.name}-webapp/deploy" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="false">
            <resources>
                <file file="${bda.conf.dir}/log4j.dtd"/>
            </resources>
        </copy>


        <bda:CopyFile
            sourcefile="${bda.conf.dir}/${download.template.file}"
            targetfile="${bda.dist.dir}/exploded/${project.name}-webapp/deploy/${download.template.file}"
            
        />
        
        
    </target>

    <target name="build:config" description="Generates configuration files for a target environment">

        <available file="${exploded.dir}/deploy" property="deploy.exists" />
        <fail unless="deploy.exists" message="Deploy folder not found. Please run build:dist first." />
        <!-- Generate Log4j XML file -->

        <copy todir="${exploded.dir}/install" includeEmptyDirs="no"
           filtering="true" overwrite="true">
            <filterset>
                <filter token="application.data.path" value="${application.data.path}"/>
                <filter token="log.level" value="${log.level}"/>
            </filterset>
            <fileset dir="${exploded.dir}/deploy">
                <patternset>
                    <include name="**/*-log4j.*"/>
                </patternset>
            </fileset>
        </copy>

        <copy todir="${exploded.dir}/install" includeEmptyDirs="no"
           filtering="false" overwrite="true">
            <fileset dir="${exploded.dir}/deploy">
                <patternset>
                    <include name="**/*log4j.dtd"/>
                </patternset>
            </fileset>
        </copy>

        <!-- Generate application property file -->

        <copy todir="${exploded.dir}/install" overwrite="true"
             flatten="true" includeEmptyDirs="no" filtering="true">
            <filterset>
                <filter token="application.data.path" value="${application.data.path}"/>
                <filter token="mail.smtp.server" value="${mail.smtp.server}"/>
                <filter token="send.email" value="${send.email}"/>
                <filter token="ncicb.contact.url" value="${ncicb.contact.url}"/>
                <filter token="vocabulary.0" value="${vocabulary.0}"/>
                <filter token="vocabulary.1" value="${vocabulary.1}"/>
                <filter token="vocabulary.2" value="${vocabulary.2}"/>
                <filter token="vocabulary.3" value="${vocabulary.3}"/>
                <filter token="vocabulary.4" value="${vocabulary.4}"/>
                <filter token="vocabulary.5" value="${vocabulary.5}"/>
                <filter token="vocabulary.other.email" value="${vocabulary.other.email}"/>
                <filter token="cadsr.email" value="${cadsr.email}"/>
                <filter token="cdisc.email" value="${cdisc.email}"/>
                <filter token="cdisc.vocabulary.0" value="${cdisc.vocabulary.0}"/>
                <filter token="cdisc.request.types" value="${cdisc.request.types}"/>
                <filter token="cdisc.codes" value="${cdisc.codes}"/>
                <filter token="cdisc.quicklinks" value="${cdisc.quicklinks}"/>
                
                <filter token="recaptcha.site.key" value="${recaptcha.site.key}"/>
                <filter token="recaptcha.security.key" value="${recaptcha.security.key}"/>
                
                
            </filterset>
            <resources>
                <file file="${exploded.dir}/deploy/${webapp.prop.file}"/>
            </resources>
        </copy>

        <bda:CopyFile
            sourcefile="${exploded.dir}/deploy/${download.template.file}"
            targetfile="${exploded.dir}/install/${download.template.file}"
        />
        
    </target>

    <target name="tomcat:stop" description="Shutdown Tomcat">

        <bda:TomcatStop
            stopscript="${tomcat.server.stopscript}"
            host="${tomcat.server.hostname}:${tomcat.server.jndi.port}"
            url="http://${tomcat.server.hostname}:${tomcat.server.port}"
        />

    </target>

    <target name="tomcat:start" description="Start Tomcat">
    
        <bda:TomcatStart
            url="http://${tomcat.server.hostname}:${tomcat.server.port}/${project.name}"
            startscript="${tomcat.server.startscript}"
        />
        
    </target>  

    <target name="deploy:hot" depends="build:all" description="Hot deploy application">
        <delete file="${tomcat.server.path}/webapps/${webapp.war.name}" quiet="true" />
        <delete dir="${tomcat.server.path}/webapps/${project.name}" quiet="true" />

        <copy
            file="${bda.dist.dir}/exploded/${project.name}-webapp/${webapp.war.name}"
            tofile="${tomcat.server.path}/webapps/${webapp.war.name}.bak"
            overwrite="true"
        />
        <move file="${tomcat.server.path}/webapps/${webapp.war.name}.bak"
            tofile="${tomcat.server.path}/webapps/${webapp.war.name}"/>

    </target>

    <target name="deploy:hot:jsp" depends="-init" description="Hot deploy JSP files">
        <delete file="${tomcat.server.path}/webapps/${webapp.war.name}" quiet="true" />
        <delete dir="${tomcat.server.path}/webapps/${project.name}" quiet="true" />

        <copy
            file="${bda.dist.dir}/exploded/${project.name}-webapp/${webapp.war.name}"
            tofile="${tomcat.server.path}/webapps/${webapp.war.name}.bak"
            overwrite="true"
        />
        <move file="${tomcat.server.path}/webapps/${webapp.war.name}.bak"
            tofile="${tomcat.server.path}/webapps/${webapp.war.name}"/>
    </target>

    <target name="deploy:local:install" depends="-init" description="Installs Tomcat based on local.properties">
        <if>
            <isset property="local.properties.file.exists"/>
            <then>
                <bda:InputYesNo
                    property="begin.install"
                    prompt="Begin a new install?"
                />
                <if>
                    <isset property="begin.install"/>
                    <then>
                        <bda:ConsoleOutput message="mkdir ${bda.temp.dir}" />
                        <mkdir dir="${bda.temp.dir}"/>
                        <available file="${tomcat.server.path}" property="tomcat.server.exists" />
                        <if>
                            <not><isset property="tomcat.server.exists"/></not>
                            <then>
                                <bda:ConsoleOutput message="Downloading ${tomcat.download.url}..."/>
                                <get src="${tomcat.download.url}" dest="${bda.temp.dir}/${tomcat.zip.name}"/>
                                <unzip src="${bda.temp.dir}/${tomcat.zip.name}" dest="${tomcat.server.path}/.." />
                                <move file="${tomcat.server.path}/../${tomcat.server.inst}" tofile="${tomcat.server.path}"/>
                            </then>
                            <else>
                                <bda:ConsoleOutput message="Tomcat present. Skipping download."/>
                                <antcall target="tomcat:stop" />
                            </else>
                        </if>
                    </then>
                    <else>
                        <bda:ConsoleOutput message="" />
                        <bda:ConsoleOutput message="Install aborted." />
                    </else>
                </if>
            </then>
            <else>
                <echo message="Please create a local.properties file and run 'deploy:local:install' again." />
                <echo message="An example local.properties can be found in the docs directory." />
            </else>
        </if>
    </target>

    <target name="deploy:local:upgrade" depends="build:all" description="Build and upgrade application">

          <antcall target="tomcat:stop" />
          <delete file="${tomcat.server.path}/webapps/${webapp.war.name}" quiet="true" />
          <delete dir="${tomcat.server.path}/webapps/${project.name}" quiet="true" />

        <bda:AddTomcatProperty
            deploydir="${tomcat.server.path}"
            backup="true"
            name="NCITermFormPropertiesFile"
            value="${application.data.path}/${web.app.conf.path}/${webapp.prop.file}"
        />

        <bda:AddTomcatProperty
            deploydir="${tomcat.server.path}"
            backup="true"
            name="gov.nih.nci.evs.browser.NCITFlog4jProperties"
            value="${application.data.path}/${web.app.conf.path}/${project.short.name}-log4j.xml"
        />

        <antcall target="-deploy:configfiles" />
        <antcall target="tomcat:start" />

    </target>

    <target name="-deploy:configfiles" depends="build:config" description="Deploy configuration files.">
        <copy todir="${application.data.path}/conf" overwrite="true"
              flatten="true" includeEmptyDirs="no" filtering="false">
            <resources>
                <file file="${exploded.dir}/install/${webapp.prop.file}"/>
                <file file="${exploded.dir}/install/${project.short.name}-log4j.xml"/>
                <file file="${exploded.dir}/install/log4j.dtd"/>
            </resources>
        </copy>
        <copy
            file="${bda.dist.dir}/exploded/${project.name}-webapp/${webapp.war.name}"
            tofile="${tomcat.server.path}/webapps/${webapp.war.name}"
            overwrite="true"
        />
    </target>

    <target name="deploy:local:uninstall" description="Uninstall the web application">
        <bda:InputYesNo
            property="begin.uninstall"
            prompt="Uninstall the application?"
        />
        <if>
            <isset property="begin.uninstall"/>
            <then>
                <antcall target="tomcat:stop" />

                <bda:RemoveTomcatProperty
                    deploydir="${tomcat.server.path}"
                    backup="true"
                    name="NCITermFormPropertiesFile"
                />

                <bda:RemoveTomcatProperty
                    deploydir="${tomcat.server.path}"
                    backup="true"
                    name="gov.nih.nci.evs.browser.NCITFlog4jProperties"
                />

                <delete file="${tomcat.server.path}/webapps/${webapp.war.name}" quiet="true" />
                <delete dir="${tomcat.server.path}/webapps/${project.name}" quiet="true" />
           </then>
        </if>
    </target>

</project>
